// Generated by purs version 0.11.6
"use strict";
var Control_Monad_Base = require("../Control.Monad.Base");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Functor_Compose = require("../Data.Functor.Compose");
var Data_Identity = require("../Data.Identity");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var WriterTStT = (function () {
    function WriterTStT(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WriterTStT.create = function (value0) {
        return function (value1) {
            return new WriterTStT(value0, value1);
        };
    };
    return WriterTStT;
})();
var MonadTransControl = function (MonadTrans0, liftWith, restoreT) {
    this.MonadTrans0 = MonadTrans0;
    this.liftWith = liftWith;
    this.restoreT = restoreT;
};
var MonadBaseControl = function (MonadBase0, liftBaseWith, restoreM) {
    this.MonadBase0 = MonadBase0;
    this.liftBaseWith = liftBaseWith;
    this.restoreM = restoreM;
};
var writerTStTToTuple = function (v) {
    return new Data_Tuple.Tuple(v.value1, v.value0);
};
var tupleToWriterTStT = function (v) {
    return new WriterTStT(v.value1, v.value0);
};
var writerTMonadTransControl = function (dictMonoid) {
    return new MonadTransControl(function () {
        return Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid);
    }, function (dictMonad) {
        return function (f) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonad)(f(function (x) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(tupleToWriterTStT)(Control_Monad_Writer_Trans.runWriterT(x));
            }));
        };
    }, function (dictMonad) {
        return function (x) {
            return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(writerTStTToTuple)(x);
        };
    });
};
var stateTMonadTransControl = new MonadTransControl(function () {
    return Control_Monad_State_Trans.monadTransStateT;
}, function (dictMonad) {
    return function (f) {
        return function (s) {
            return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (b) {
                return new Data_Tuple.Tuple(b, s);
            })(f(function (x) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(tupleToWriterTStT)(Control_Monad_State_Trans.runStateT(x)(s));
            }));
        };
    };
}, function (dictMonad) {
    return function (x) {
        return function (v) {
            return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(writerTStTToTuple)(x);
        };
    };
});
var rwsTMonadTransControl = function (dictMonoid) {
    return new MonadTransControl(function () {
        return Control_Monad_RWS_Trans.monadTransRWST(dictMonoid);
    }, function (dictMonad) {
        return function (f) {
            return function (r) {
                return function (s) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (x) {
                        return new Control_Monad_RWS_Trans.RWSResult(s, x, Data_Monoid.mempty(dictMonoid));
                    })(f(function (t) {
                        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (v) {
                            return new Data_Tuple.Tuple(v.value2, new Data_Tuple.Tuple(v.value0, v.value1));
                        })(Control_Monad_RWS_Trans.runRWST(t)(r)(s));
                    }));
                };
            };
        };
    }, function (dictMonad) {
        return function (mSt) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (v2) {
                        return new Control_Monad_RWS_Trans.RWSResult(v2.value1.value0, v2.value1.value1, v2.value0);
                    })(mSt);
                };
            };
        };
    });
};
var runIdentity = function (v) {
    return v;
};
var tupleMonadBaseControl = function (dictMonoid) {
    return new MonadBaseControl(function () {
        return Control_Monad_Base.tupleMonadBase(dictMonoid);
    }, function (f) {
        return f(Data_Functor.map(Data_Tuple.functorTuple)(Data_Identity.Identity));
    }, Data_Functor.map(Data_Tuple.functorTuple)(runIdentity));
};
var runCompose = function (v) {
    return v;
};
var restoreT = function (dict) {
    return dict.restoreT;
};
var restoreM = function (dict) {
    return dict.restoreM;
};
var readerTMonadTransControl = new MonadTransControl(function () {
    return Control_Monad_Reader_Trans.monadTransReaderT;
}, function (dictMonad) {
    return function (f) {
        return function (r) {
            return f(function (v) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Identity.Identity)(v(r));
            });
        };
    };
}, function (dictMonad) {
    return function (x) {
        return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(((dictMonad.Bind1()).Apply0()).Functor0()))(runIdentity)(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonad)(x));
    };
});
var maybeTMonadTransControl = new MonadTransControl(function () {
    return Control_Monad_Maybe_Trans.monadTransMaybeT;
}, function (dictMonad) {
    return function (f) {
        return Control_Monad_Maybe_Trans.MaybeT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Maybe.Just.create)(f(Control_Monad_Maybe_Trans.runMaybeT)));
    };
}, function (dictMonad) {
    return Control_Monad_Maybe_Trans.MaybeT;
});
var maybeMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.maybeMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Identity.Identity));
}, Data_Functor.map(Data_Maybe.functorMaybe)(runIdentity));
var listMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.listMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_List_Types.functorList)(Data_Identity.Identity));
}, Data_Functor.map(Data_List_Types.functorList)(runIdentity));
var liftWith = function (dict) {
    return dict.liftWith;
};
var liftBaseWith = function (dict) {
    return dict.liftBaseWith;
};
var identityMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.identityMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_Identity.functorIdentity)(Data_Identity.Identity));
}, Data_Functor.map(Data_Identity.functorIdentity)(runIdentity));
var functorWriterTStT = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new WriterTStT(v.value0, f(v.value1));
    };
});
var funcMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.functionMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_Functor.functorFn)(Data_Identity.Identity));
}, Data_Functor.map(Data_Functor.functorFn)(runIdentity));
var exceptTMonadTransControl = new MonadTransControl(function () {
    return Control_Monad_Except_Trans.monadTransExceptT;
}, function (dictMonad) {
    return function (f) {
        return Control_Monad_Except_Trans.ExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(f(Control_Monad_Except_Trans.runExceptT)));
    };
}, function (dictMonad) {
    return Control_Monad_Except_Trans.ExceptT;
});
var eitherMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.eitherMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_Either.functorEither)(Data_Identity.Identity));
}, Data_Functor.map(Data_Either.functorEither)(runIdentity));
var effMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.effMonadBase;
}, function (f) {
    return f(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Identity.Identity));
}, Data_Functor.map(Control_Monad_Eff.functorEff)(runIdentity));
var defaultRestoreM = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonadTrans) {
                return function (dictMonadTransControl) {
                    return function (x) {
                        return restoreT(dictMonadTransControl)(dictMonad)(restoreM(dictMonadBaseControl)(Data_Functor.map(((dictMonad1.Bind1()).Apply0()).Functor0())(runCompose)(x)));
                    };
                };
            };
        };
    };
};
var defaultLiftBaseWith = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonadTrans) {
                return function (dictMonadTransControl) {
                    return function (f) {
                        return liftWith(dictMonadTransControl)(dictMonad)(function (run) {
                            return liftBaseWith(dictMonadBaseControl)(function (runInBase) {
                                return f(function (x) {
                                    return Data_Functor.map(((dictMonad1.Bind1()).Apply0()).Functor0())(Data_Functor_Compose.Compose)(runInBase(run(x)));
                                });
                            });
                        });
                    };
                };
            };
        };
    };
};
var exceptTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBaseControl(function () {
                return Control_Monad_Base.exceptTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1);
            }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Except_Trans.monadTransExceptT)(exceptTMonadTransControl), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Except_Trans.monadTransExceptT)(exceptTMonadTransControl));
        };
    };
};
var maybeTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBaseControl(function () {
                return Control_Monad_Base.maybeTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1);
            }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Maybe_Trans.monadTransMaybeT)(maybeTMonadTransControl), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Maybe_Trans.monadTransMaybeT)(maybeTMonadTransControl));
        };
    };
};
var readerTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBaseControl(function () {
                return Control_Monad_Base.readerTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1);
            }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Reader_Trans.monadTransReaderT)(readerTMonadTransControl), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Reader_Trans.monadTransReaderT)(readerTMonadTransControl));
        };
    };
};
var rwsTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonoid) {
                return new MonadBaseControl(function () {
                    return Control_Monad_Base.rwsTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1)(dictMonoid);
                }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(rwsTMonadTransControl(dictMonoid)), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(rwsTMonadTransControl(dictMonoid)));
            };
        };
    };
};
var stateTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBaseControl(function () {
                return Control_Monad_Base.stateTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1);
            }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_State_Trans.monadTransStateT)(stateTMonadTransControl), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_State_Trans.monadTransStateT)(stateTMonadTransControl));
        };
    };
};
var writerTMonadBaseControl = function (dictMonadBaseControl) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonoid) {
                return new MonadBaseControl(function () {
                    return Control_Monad_Base.writerTMonadBase(dictMonadBaseControl.MonadBase0())(dictMonad)(dictMonad1)(dictMonoid);
                }, defaultLiftBaseWith(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(writerTMonadTransControl(dictMonoid)), defaultRestoreM(dictMonadBaseControl)(dictMonad)(dictMonad1)(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(writerTMonadTransControl(dictMonoid)));
            };
        };
    };
};
var arrayMonadBaseControl = new MonadBaseControl(function () {
    return Control_Monad_Base.arrayMonadBase;
}, function (f) {
    return f(Data_Functor.map(Data_Functor.functorArray)(Data_Identity.Identity));
}, Data_Functor.map(Data_Functor.functorArray)(runIdentity));
module.exports = {
    WriterTStT: WriterTStT, 
    MonadBaseControl: MonadBaseControl, 
    MonadTransControl: MonadTransControl, 
    defaultLiftBaseWith: defaultLiftBaseWith, 
    defaultRestoreM: defaultRestoreM, 
    liftBaseWith: liftBaseWith, 
    liftWith: liftWith, 
    restoreM: restoreM, 
    restoreT: restoreT, 
    tupleToWriterTStT: tupleToWriterTStT, 
    writerTStTToTuple: writerTStTToTuple, 
    readerTMonadTransControl: readerTMonadTransControl, 
    functorWriterTStT: functorWriterTStT, 
    writerTMonadTransControl: writerTMonadTransControl, 
    stateTMonadTransControl: stateTMonadTransControl, 
    exceptTMonadTransControl: exceptTMonadTransControl, 
    maybeTMonadTransControl: maybeTMonadTransControl, 
    rwsTMonadTransControl: rwsTMonadTransControl, 
    effMonadBaseControl: effMonadBaseControl, 
    eitherMonadBaseControl: eitherMonadBaseControl, 
    tupleMonadBaseControl: tupleMonadBaseControl, 
    maybeMonadBaseControl: maybeMonadBaseControl, 
    identityMonadBaseControl: identityMonadBaseControl, 
    listMonadBaseControl: listMonadBaseControl, 
    arrayMonadBaseControl: arrayMonadBaseControl, 
    funcMonadBaseControl: funcMonadBaseControl, 
    readerTMonadBaseControl: readerTMonadBaseControl, 
    writerTMonadBaseControl: writerTMonadBaseControl, 
    stateTMonadBaseControl: stateTMonadBaseControl, 
    exceptTMonadBaseControl: exceptTMonadBaseControl, 
    maybeTMonadBaseControl: maybeTMonadBaseControl, 
    rwsTMonadBaseControl: rwsTMonadBaseControl
};
